
import { supabase } from '@/integrations/supabase/client';
import { generateProperties } from './utils/propertyGenerator';

export const seedDatabase = async () => {
  try {
    console.log('🌱 Starting database seeding with Supabase...');
    
    // Generate sample properties with more variety
    const sampleProperties = generateProperties(75);
    
    console.log(`📝 Generated ${sampleProperties.length} sample properties`);
    console.log('🏠 Property types:', [...new Set(sampleProperties.map(p => p.propertyType))]);
    console.log('🏙️ Locations:', [...new Set(sampleProperties.map(p => p.city))]);
    
    // Insert properties into Supabase in batches to avoid timeout
    const batchSize = 25;
    let insertedCount = 0;
    
    for (let i = 0; i < sampleProperties.length; i += batchSize) {
      const batch = sampleProperties.slice(i, i + batchSize);
      
      console.log(`📤 Inserting batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(sampleProperties.length / batchSize)}...`);
      
      const { data, error } = await supabase
        .from('properties')
        .insert(batch.map(property => ({
          title: property.title,
          description: property.description,
          location: `${property.address}, ${property.city}, ${property.state}`,
          price: property.price,
          bedrooms: property.bedrooms,
          bathrooms: property.bathrooms,
          size_sqft: property.area,
          property_type: property.propertyType,
          status: property.status === 'active' ? 'available' : property.status === 'rented' ? 'rented' : 'available',
          images: property.images,
          amenities: property.amenities,
          agent_id: property.agentId,
          is_featured: property.isFeatured || false
        })))
        .select();

      if (error) {
        console.error(`❌ Error inserting batch ${Math.floor(i / batchSize) + 1}:`, error);
        throw error;
      }

      insertedCount += data?.length || 0;
      console.log(`✅ Batch ${Math.floor(i / batchSize) + 1} completed (${data?.length || 0} properties)`);
      
      // Small delay between batches to avoid overwhelming the database
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    // Generate some sample applications for testing
    console.log('👥 Creating sample applications...');
    
    // Get a few properties to create applications for
    const { data: properties, error: propError } = await supabase
      .from('properties')
      .select('id')
      .limit(10);
    
    if (!propError && properties && properties.length > 0) {
      const sampleApplications = properties.slice(0, 5).map(property => ({
        property_id: property.id,
        user_id: 'sample-user-' + Math.random().toString(36).substr(2, 9),
        status: ['pending', 'approved', 'rejected'][Math.floor(Math.random() * 3)],
        monthly_income: Math.floor(Math.random() * 500000) + 100000,
        employment_status: ['Employed', 'Self-employed', 'Student'][Math.floor(Math.random() * 3)],
        move_in_date: new Date(Date.now() + Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        notes: 'Sample application generated by seed script'
      }));

      const { error: appError } = await supabase
        .from('applications')
        .insert(sampleApplications);

      if (appError) {
        console.warn('⚠️ Could not create sample applications:', appError.message);
      } else {
        console.log(`✅ Created ${sampleApplications.length} sample applications`);
      }
    }

    console.log('\n🎉 Database seeding completed successfully!');
    console.log(`📊 Final Statistics:`);
    console.log(`   • Properties created: ${insertedCount}`);
    console.log(`   • Featured properties: ${sampleProperties.filter(p => p.isFeatured).length}`);
    console.log(`   • Locations: ${abujaDistricts.join(', ')}`);
    console.log(`   • Price range: ₦200,000 - ₦5,000,000`);
    console.log(`   • Property types: Apartments, Houses, Studios, Shared, Shortlets`);
    console.log('💰 All prices are in Nigerian Naira (₦)');
    
  } catch (error) {
    console.error('💥 Error seeding database:', error);
    throw error;
  }
};

export const clearDatabase = async () => {
  try {
    console.log('🧹 Clearing Supabase database...');
    
    // Define table names as literals to satisfy TypeScript
    const tableNames = ['payments', 'featured_requests', 'applications', 'properties'] as const;
    
    for (const tableName of tableNames) {
      console.log(`🗑️ Clearing ${tableName} table...`);
      const { error } = await supabase.from(tableName).delete().neq('id', '00000000-0000-0000-0000-000000000000');
      
      if (error) {
        console.error(`❌ Error clearing ${tableName}:`, error);
      } else {
        console.log(`✅ Cleared ${tableName} table`);
      }
    }
    
    console.log('🎯 Supabase database cleared successfully!');
  } catch (error) {
    console.error('💥 Error clearing Supabase database:', error);
    throw error;
  }
};

// Abuja districts for reference
const abujaDistricts = [
  'Maitama', 'Asokoro', 'Garki', 'Wuse', 'Gwarinpa', 'Kubwa', 
  'Lugbe', 'Kuje', 'Nyanya', 'Karmo', 'Lifecamp', 'Jabi',
  'Utako', 'Gudu', 'Kaura', 'Kado', 'Dakwo', 'Durumi',
  'Wuye', 'Katampe', 'Lokogoma', 'Galadimawa', 'Jahi'
];
